// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  SHIPPED
  CANCELLED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  role      Role     @default(CUSTOMER)
  password  String? // if using email/password; otherwise null (OAuth)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  carts     Cart[]
  orders    Order[]
  addresses Address[]
}

model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  brand       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants   ProductVariant[]
  images     ProductImage[]
  // categories many-to-many via ProductCategory
  categories ProductCategory[]

  // optional: searchable vector stored outside Prisma (managed by raw SQL migration)
}

model ProductVariant {
  id         String  @id @default(cuid())
  productId  String
  sku        String  @unique
  priceCents Int
  currency   String  @default("usd")
  attributes Json? // e.g., {"size":"M","color":"Black"}
  active     Boolean @default(true)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  inventoryOnHand   Int @default(0)
  inventoryReserved Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  sort      Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, sort])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products ProductCategory[]
}

model ProductCategory {
  // join table
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String? // for guests (cookie/session)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  items CartItem[]

  @@unique([sessionId]) // only if you ensure a single cart per session
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  variantId String
  qty       Int    @default(1)

  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict)

  @@unique([cartId, variantId]) // one row per variant in a cart
}

model Order {
  id                  String      @id @default(cuid())
  userId              String?
  status              OrderStatus @default(PENDING)
  totalCents          Int
  currency            String      @default("usd")
  stripePaymentIntent String?     @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  user  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  items OrderItem[]

  // address refs
  shippingAddressId String?
  billingAddressId  String?
  shippingAddress   Address? @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  billingAddress    Address? @relation("OrderBillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)

  @@index([userId, status, createdAt])
}

model OrderItem {
  id             String @id @default(cuid())
  orderId        String
  variantId      String
  unitPriceCents Int
  qty            Int

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict)

  @@index([orderId])
}

model Address {
  id        String      @id @default(cuid())
  userId    String?
  type      AddressType
  line1     String
  line2     String?
  city      String
  region    String?
  postal    String
  country   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // âœ… back-relations for Order.shippingAddress / Order.billingAddress
  shippingForOrders Order[] @relation("OrderShippingAddress")
  billingForOrders  Order[] @relation("OrderBillingAddress")
}
